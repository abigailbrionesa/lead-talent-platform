generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  MEMBER
  RECRUITER
  ADMIN
}

enum AccessStatus {
  PENDING
  APPROVED
  DENIED
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Member {
  id               Int      @id @default(autoincrement())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  age              Int
  phone            String
  chapter          String
  lead_role        String
  university_cycle String
  career           String
  linkedin_url     String
  resume_url       String
  availability     String
  submitted_at     DateTime @default(now()) @db.Timestamp(6)
}

model Recruiter {
  id               Int      @id @default(autoincrement())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company          String
  petition_status  AccessStatus @default(PENDING)
  petitioned_at    DateTime     @default(now()) @db.Timestamp(6)
  reviewed_at      DateTime?
  reviewed_by      String? 
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role?
  password      String?
  accounts      Account[]
  sessions      Session[]
  member        Member?
  recruiter     Recruiter?
  isProfileComplete Boolean @default(false)
}
